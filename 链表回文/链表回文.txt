/*描述
对于一个链表，请设计一个时间复杂度为O(n),额外空间复杂度为O(1)的算法，判断其是否为回文结构。

给定一个链表的头指针A，请返回一个bool值，代表其是否为回文结构。保证链表长度小于等于900。

测试样例：
1->2->2->1
返回：true
*/


/*
struct ListNode {
int val;
struct ListNode *next;
ListNode(int x) : val(x), next(NULL) {}
};*/

class PalindromeList {
public:
	//快慢指针找中间值
	struct ListNode* middleNode(struct ListNode* head)
	{
		struct ListNode* fast = head, *slow = head;
		while (fast && fast->next)
		{
			slow = slow->next;
			fast = fast->next->next;
		}
		return slow;
	}

	//反转链表
	struct ListNode* reverseList(struct ListNode* head)
	{
		struct ListNode* cur = head;
		struct ListNode* newHead = NULL;
		while (cur)
		{
			struct ListNode* next = cur->next;
			cur->next = newHead;
			newHead = cur;
			cur = next;
		}
		return newHead;
	}

	bool chkPalindrome(ListNode* A) {
		// 先找中间节点
		struct ListNode* mid = middleNode(A);
		struct ListNode* rHead = reverseList(mid);
		while (A && rHead)
		{
			if (A->val != rHead->val)return false;
			else
			{
				A = A->next;
				rHead = rHead->next;
			}
		}
		return true;
	}
};